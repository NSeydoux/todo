{"version":3,"sources":["components/TodoComponent.tsx","services/fetchProfile.ts","services/fetchPublicTypeIndex.ts","services/addToTypeIndex.ts","services/initialiseNotesList.ts","hooks/useTodoList.ts","hooks/usePublicTypeIndex.ts","components/TodosList.tsx","components/Dashboard.tsx","components/PodConnecter.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["TodoComponent","props","isComplete","todo","getString","cal","status","completed","className","react_default","a","createElement","Fragment","type","checked","onChange","changeStatus","schema","text","onClick","onDelete","fetchProfile","_fetchProfile","apply","this","arguments","_callee","currentSession","webIdDoc","profile","regenerator_default","wrap","_context","prev","next","solidAuth","sent","abrupt","fetchDocument","webId","getSubject","stop","fetchPublicTypeIndex","_fetchPublicTypeIndex","publicTypeIndexUrl","document","getRef","solid","publicTypeIndex","addToTypeIndex","_x","_x2","_x3","_addToTypeIndex","typeIndex","forClass","typeRegistration","addSubject","addRef","rdf","TypeRegistration","instance","asRef","save","initialiseNotesList","_initialiseNotesList","_ref","_ref2","storage","notesListRef","notesList","Promise","all","Object","slicedToArray","space","createDocument","TextDigitalDocument","useTodoList","setNotesList","_React$useState","React","useState","_React$useState2","setPublicTypeIndex","useEffect","then","fetchedPublicTypeIndex","usePublicTypeIndex","asyncToGenerator","mark","notesListIndex","notesListUrl","findSubject","TodosList","todoDocument","setTodoDocument","_React$useState3","_React$useState4","formContent","setFormContent","todoListArray","getSubjectsOfType","_saveNote","event","newNote","updatedDoc","preventDefault","trim","length","addLiteral","dateCreated","Date","now","_deleteNote","_callee2","_context2","removeSubject","_changeStatus","_callee3","_context3","setLiteral","created","noteElements","sort","byDate","byComplete","map","TodoComponent_TodoComponent","key","deleteNote","onSubmit","placeholder","value","e","target","filter","note1","note2","date1","getDateTime","date2","getTime","Dashboard","TodosList_TodosList","suggestedWebId","URLSearchParams","location","search","get","PodConnecter","chosenWebId","setWebId","SolidAuth","login","htmlFor","name","id","lib","popup","App","StrictMode","PodConnecter_PodConnecter","Dashboard_Dashboard","Boolean","window","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d9331312.chunk.js","sourcesContent":["import React from 'react';\nimport {TripleSubject} from \"tripledoc\";\nimport {cal, schema} from \"rdf-namespaces\";\n\ninterface Props {\n    todo: TripleSubject;\n    onDelete: any;\n    changeStatus: any;\n};\n\nexport const TodoComponent: React.FC<Props> = (props) => {\n\n    const isComplete = props.todo.getString(cal.status) === cal.completed;\n\n    let className = '';\n    if (isComplete) {\n        className = 'completed';\n    }\n\n    return (\n        <>\n            <li className={className}>\n                <div className=\"view\">\n                    <input className=\"toggle\" type=\"checkbox\" checked={isComplete} onChange={props.changeStatus}/>\n                    <label>{props.todo.getString(schema.text) || ''}</label>\n                    <button className=\"destroy\" onClick={props.onDelete}></button>\n                </div>\n            </li>\n        </>\n    );\n};\n\n","import solidAuth from 'solid-auth-client';\nimport { fetchDocument } from 'tripledoc';\n\nexport async function fetchProfile () {\n  const currentSession = await solidAuth.currentSession();\n  if (!currentSession) {\n    return null;\n  }\n\n  const webIdDoc = await fetchDocument(currentSession.webId);\n  const profile = webIdDoc.getSubject(currentSession.webId);\n  return profile;\n}\n","import { fetchProfile } from './fetchProfile';\nimport { fetchDocument } from 'tripledoc';\nimport { solid } from 'rdf-namespaces';\n\nexport async function fetchPublicTypeIndex () {\n  const profile = await fetchProfile();\n  if (profile === null) {\n    return null;\n  }\n\n  const publicTypeIndexUrl = profile.getRef(solid.publicTypeIndex);\n  if (!publicTypeIndexUrl || typeof publicTypeIndexUrl !== 'string') {\n    return null;\n  }\n\n  const document = await fetchDocument(publicTypeIndexUrl);\n  return document;\n}\n","import { TripleDocument, Reference } from 'tripledoc';\nimport { rdf, solid } from 'rdf-namespaces';\n\nexport async function addToTypeIndex (\n  typeIndex: TripleDocument,\n  document: TripleDocument,\n  forClass: Reference,\n) {\n  const typeRegistration = typeIndex.addSubject();\n  typeRegistration.addRef(rdf.type, solid.TypeRegistration)\n  typeRegistration.addRef(solid.instance, document.asRef())\n  typeRegistration.addRef(solid.forClass, forClass)\n  return typeIndex.save([ typeRegistration ]);\n}\n","import { fetchProfile } from './fetchProfile';\nimport { space, schema } from 'rdf-namespaces';\nimport { createDocument } from 'tripledoc';\nimport { fetchPublicTypeIndex } from './fetchPublicTypeIndex';\nimport { addToTypeIndex } from './addToTypeIndex';\n\nexport async function initialiseNotesList () {\n  const [profile, publicTypeIndex] = await Promise.all([fetchProfile(), fetchPublicTypeIndex()]);\n  if (profile === null || publicTypeIndex === null) {\n    return null;\n  }\n\n  const storage = profile.getRef(space.storage);\n  if (typeof storage !== 'string') {\n    return null;\n  }\n\n  // Note: There's an assumption here that `/public/` exists and is writable for this app.\n  //       In the future, \"Shapes\" should hopefully allow us to get more guarantees about this:\n  //       https://ruben.verborgh.org/blog/2019/06/17/shaping-linked-data-apps/#need-for-shapes\n  const notesListRef = storage + 'public/notes.ttl';\n  const notesList = createDocument(notesListRef);\n  await notesList.save();\n  await addToTypeIndex(publicTypeIndex, notesList, schema.TextDigitalDocument);\n  return notesList;\n}\n","import React from 'react';\nimport { fetchDocument, TripleDocument, TripleSubject } from 'tripledoc';\nimport { solid, schema } from 'rdf-namespaces';\nimport { usePublicTypeIndex } from './usePublicTypeIndex';\nimport { initialiseNotesList } from '../services/initialiseNotesList';\n\nexport function useTodoList(setNotesList: any) {\n  const publicTypeIndex = usePublicTypeIndex();\n  // const [notesList, setNotesList] = React.useState<TripleDocument>();\n\n  React.useEffect(() => {\n    if (!publicTypeIndex) {\n      return;\n    }\n\n    (async () => {\n      const notesListIndex = publicTypeIndex.findSubject(solid.forClass, schema.TextDigitalDocument);\n      if (!notesListIndex) {\n        // If no notes document is listed in the public type index, create one:\n        const notesList = await initialiseNotesList()\n        if (notesList === null) {\n          return;\n        }\n        setNotesList(notesList);\n        return;\n      } else {\n        // If the public type index does list a notes document, fetch it:\n        const notesListUrl = notesListIndex.getRef(solid.instance);\n        if (typeof notesListUrl !== 'string') {\n          return;\n        }\n        const document = await fetchDocument(notesListUrl);\n        setNotesList(document);\n      }\n    })();\n\n  }, [publicTypeIndex]);\n}\n\nexport function getNotes(notesList: TripleDocument): TripleSubject[] {\n  return notesList.getSubjectsOfType(schema.TextDigitalDocument);\n}\n","import React from 'react';\nimport { TripleDocument } from 'tripledoc';\nimport { fetchPublicTypeIndex } from '../services/fetchPublicTypeIndex';\n\nexport function usePublicTypeIndex() {\n  const [publicTypeIndex, setPublicTypeIndex] = React.useState<TripleDocument>();\n\n  React.useEffect(() => {\n    fetchPublicTypeIndex().then(fetchedPublicTypeIndex => {\n      if (fetchedPublicTypeIndex === null) {\n        return;\n      }\n      setPublicTypeIndex(fetchedPublicTypeIndex);\n    });\n  }, []);\n\n  return publicTypeIndex;\n}\n","import React from 'react';\nimport {TodoComponent} from './TodoComponent';\nimport {TripleDocument, TripleSubject} from \"tripledoc\";\nimport {cal, rdf, schema} from \"rdf-namespaces\";\nimport {getNotes, useTodoList} from \"../hooks/useTodoList\";\n\n\nexport const TodosList: React.FC = () => {\n\n    const [todoDocument, setTodoDocument] = React.useState<TripleDocument>();\n    const [formContent, setFormContent] = React.useState('');\n\n    useTodoList(setTodoDocument);\n\n    if (!todoDocument) {\n        return null;\n    }\n\n    const todoListArray = getNotes(todoDocument);\n\n    async function saveNote(event: React.FormEvent) {\n        event.preventDefault();\n\n        if (!formContent.trim().length) {\n            return;\n        }\n\n        if (todoDocument) {\n            const newNote = todoDocument.addSubject();\n            newNote.addRef(rdf.type, schema.TextDigitalDocument);\n            newNote.addLiteral(schema.text, formContent);\n            newNote.addLiteral(schema.dateCreated, new Date(Date.now()))\n\n            const updatedDoc = await todoDocument.save([newNote]);\n            setTodoDocument(updatedDoc);\n\n            setFormContent('');\n        }\n    }\n\n    async function deleteNote(todo: TripleSubject) {\n        if (todoDocument) {\n            todoDocument.removeSubject(todo.asRef());\n            const updatedDoc = await todoDocument.save();\n            setTodoDocument(updatedDoc);\n        }\n    }\n\n    async function changeStatus(todo: TripleSubject) {\n        if (isComplete(todo)) {\n            todo.setLiteral(cal.status, cal.created);\n        } else {\n            todo.setLiteral(cal.status, cal.completed);\n        }\n\n        if (todoDocument) {\n            const updatedDoc = await todoDocument.save();\n            setTodoDocument(updatedDoc);\n        }\n    }\n\n    const noteElements = todoListArray.sort(byDate).sort(byComplete).map((todo: TripleSubject) => (\n        <TodoComponent key={todo.asRef()} todo={todo} onDelete={() => {\n            deleteNote(todo)\n        }} changeStatus={() => {\n            changeStatus(todo);\n        }}/>\n    ));\n\n\n    return (\n        <>\n            <header className=\"header\">\n                <h1>\n                    Todos\n                </h1>\n                <form onSubmit={saveNote}>\n                    <input className=\"new-todo\" placeholder=\"What needs to be done?\" value={formContent}\n                           onChange={(e) => {\n                               e.preventDefault();\n                               setFormContent(e.target.value);\n                           }}/>\n                </form>\n            </header>\n\n            <section className=\"main\">\n                <ul className=\"todo-list\">\n                    {noteElements}\n                </ul>\n            </section>\n            <footer className=\"footer\">\n                <span className=\"todo-count\"><strong>{openTodosCount(todoListArray)}</strong> items left</span>\n            </footer>\n        </>\n    );\n};\n\nfunction byDate(note1: TripleSubject, note2: TripleSubject): number {\n    const date1 = note1.getDateTime(schema.dateCreated);\n    const date2 = note2.getDateTime(schema.dateCreated);\n    if (!(date1 instanceof Date) || !(date2 instanceof Date)) {\n        return 0;\n    }\n\n    return date2.getTime() - date1.getTime();\n}\n\nfunction byComplete(note1: TripleSubject, note2: TripleSubject): number {\n    if (isComplete(note1) === isComplete(note2)) {\n        return 0;\n    }\n\n    if (isComplete(note1) && !isComplete(note2)) {\n        return 1;\n    }\n\n    return -1;\n}\n\nfunction isComplete(todo: TripleSubject) {\n    return cal.completed === todo.getString(cal.status);\n}\n\nfunction openTodosCount(todos: TripleSubject[]): number {\n    return todos.filter((todo: TripleSubject) => {\n        return !isComplete(todo);\n    }).length;\n}\n\n","import React from 'react';\nimport {foaf} from 'rdf-namespaces';\nimport {useProfile} from '../hooks/useProfile';\nimport {TodosList} from './TodosList';\n\nexport const Dashboard: React.FC = () => {\n    // const profile = useProfile();\n    //\n    // const name = (profile) ? profile.getString(foaf.name) : null;\n    // const title = (name)\n    //     ? `Public Todos for ${name}`\n    //     : 'Public Todos';\n\n    return <>\n        <section className=\"todoapp\">\n            <TodosList />\n        </section>\n    </>;\n};\n","import React from 'react';\nimport { LoginButton } from '@solid/react';\nimport SolidAuth from 'solid-auth-client';\n\nconst suggestedWebId = (URLSearchParams && document.location.search)\n  ? (new URLSearchParams(document.location.search)).get('webid')\n  : null;\n\nexport const PodConnecter: React.FC = () => {\n  const [chosenWebId, setWebId] = React.useState(suggestedWebId);\n\n  if (suggestedWebId) {\n    const login = () => {\n      if (!chosenWebId) {\n        return;\n      }\n\n      SolidAuth.login(chosenWebId);\n    }\n\n    return (\n      <form onSubmit={(event) => {event.preventDefault(); login(); }}>\n        <div className=\"field\">\n          <div className=\"control\">\n            <label htmlFor=\"webid\" className=\"label\">Your WebID:</label>\n            <input\n              type=\"url\"\n              name=\"webid\"\n              id=\"webid\"\n              className=\"input is-large\"\n              value={chosenWebId || ''}\n              onChange={(e) => { e.preventDefault(); setWebId(e.target.value); }}\n            />\n          </div>\n        </div>\n        <div className=\"field\">\n          <div className=\"control\">\n            <input type=\"submit\" className=\"button is-primary is-large\" value=\"Connect\"/>\n          </div>\n        </div>\n      </form>\n    );\n  }\n\n  return <>\n    <LoginButton popup=\"popup.html\" className=\"button is-large is-primary\">Connect</LoginButton>\n  </>;\n}\n","import React from 'react';\nimport { LoggedOut, LoggedIn } from '@solid/react';\nimport { Dashboard } from './components/Dashboard';\nimport { PodConnecter } from './components/PodConnecter';\n\nconst App: React.FC = () => {\n  return <>\n    <React.StrictMode>\n      <LoggedOut>\n        <section className=\"section\">\n          <p className=\"content\">Please connect to your Pod to start taking Todos.</p>\n          <p className=\"content\">\n            <PodConnecter/>\n          </p>\n        </section>\n      </LoggedOut>\n      <LoggedIn>\n        <Dashboard/>\n      </LoggedIn>\n    </React.StrictMode>\n  </>;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}